{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Oppilas1\\\\Desktop\\\\Project\\\\Group-Project\\\\front-end\\\\src\\\\components\\\\timeInput.tsx\";\n// src/components/timeInput.tsx\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeInput = ({\n  value,\n  onChange,\n  maxTotalSeconds\n}) => {\n  // Clamp the value to the maximum allowed time if provided\n  const clampedTotal = maxTotalSeconds ? Math.min(value, maxTotalSeconds) : value;\n\n  // Calculate minutes and seconds from total seconds\n  const minutes = Math.floor(clampedTotal / 60);\n  const seconds = clampedTotal % 60;\n\n  // Calculate maximum allowed minutes and seconds based on maxTotalSeconds\n  const maxMinutes = maxTotalSeconds ? Math.floor(maxTotalSeconds / 60) : Infinity;\n  const maxSeconds = maxTotalSeconds && minutes === maxMinutes ? maxTotalSeconds % 60 : 59;\n\n  // Handle changes to the minutes input\n  const handleMinutesChange = e => {\n    const inputMinutes = parseInt(e.target.value, 10) || 0;\n    const newTotal = inputMinutes * 60 + seconds;\n    onChange(maxTotalSeconds ? Math.min(newTotal, maxTotalSeconds) : newTotal);\n  };\n\n  // Handle changes to the seconds input\n  const handleSecondsChange = e => {\n    const inputSeconds = Math.min(parseInt(e.target.value, 10) || 0, maxSeconds); // Ensure seconds don't exceed maxSeconds\n    const newTotal = minutes * 60 + inputSeconds;\n    onChange(maxTotalSeconds ? Math.min(newTotal, maxTotalSeconds) : newTotal);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      defaultValue: minutes,\n      onBlur: handleMinutesChange,\n      min: 0,\n      max: maxMinutes,\n      \"aria-label\": \"Minutes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \":\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      defaultValue: seconds,\n      onChange: e => {\n        if (e.target.value.length > 2) {\n          e.target.value = e.target.value.slice(0, 2); // Limit to 2 characters\n        }\n      },\n      onBlur: handleSecondsChange,\n      min: 0,\n      max: maxSeconds,\n      \"aria-label\": \"Seconds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = TimeInput;\nexport default TimeInput;\nvar _c;\n$RefreshReg$(_c, \"TimeInput\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TimeInput","value","onChange","maxTotalSeconds","clampedTotal","Math","min","minutes","floor","seconds","maxMinutes","Infinity","maxSeconds","handleMinutesChange","e","inputMinutes","parseInt","target","newTotal","handleSecondsChange","inputSeconds","className","children","type","defaultValue","onBlur","max","fileName","_jsxFileName","lineNumber","columnNumber","length","slice","_c","$RefreshReg$"],"sources":["C:/Users/Oppilas1/Desktop/Project/Group-Project/front-end/src/components/timeInput.tsx"],"sourcesContent":["// src/components/timeInput.tsx\r\nimport React from \"react\";\r\n\r\ninterface TimeInputProps {\r\n  value: number; // Total time in seconds\r\n  onChange: (totalSeconds: number) => void; // Callback when time changes\r\n  maxTotalSeconds?: number; // Optional maximum allowed time in seconds\r\n}\r\n\r\nconst TimeInput: React.FC<TimeInputProps> = ({\r\n  value,\r\n  onChange,\r\n  maxTotalSeconds,\r\n}) => {\r\n  // Clamp the value to the maximum allowed time if provided\r\n  const clampedTotal = maxTotalSeconds ? Math.min(value, maxTotalSeconds) : value;\r\n\r\n  // Calculate minutes and seconds from total seconds\r\n  const minutes = Math.floor(clampedTotal / 60);\r\n  const seconds = clampedTotal % 60;\r\n\r\n  // Calculate maximum allowed minutes and seconds based on maxTotalSeconds\r\n  const maxMinutes = maxTotalSeconds ? Math.floor(maxTotalSeconds / 60) : Infinity;\r\n  const maxSeconds =\r\n    maxTotalSeconds && minutes === maxMinutes ? maxTotalSeconds % 60 : 59;\r\n\r\n  // Handle changes to the minutes input\r\n  const handleMinutesChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const inputMinutes = parseInt(e.target.value, 10) || 0;\r\n    const newTotal = inputMinutes * 60 + seconds;\r\n    onChange(maxTotalSeconds ? Math.min(newTotal, maxTotalSeconds) : newTotal);\r\n  };\r\n\r\n  // Handle changes to the seconds input\r\n  const handleSecondsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const inputSeconds = Math.min(parseInt(e.target.value, 10) || 0, maxSeconds); // Ensure seconds don't exceed maxSeconds\r\n    const newTotal = minutes * 60 + inputSeconds;\r\n    onChange(maxTotalSeconds ? Math.min(newTotal, maxTotalSeconds) : newTotal);\r\n  };\r\n\r\n  return (\r\n    <div className=\"time-input\">\r\n      <input\r\n        type=\"number\"\r\n        defaultValue={minutes}\r\n        onBlur={handleMinutesChange}\r\n        min={0}\r\n        max={maxMinutes}\r\n        aria-label=\"Minutes\"\r\n      />\r\n      <span>:</span>\r\n      <input\r\n        type=\"number\"\r\n        defaultValue={seconds}\r\n        onChange={(e) => {\r\n            if (e.target.value.length > 2) {\r\n              e.target.value = e.target.value.slice(0, 2); // Limit to 2 characters\r\n            }\r\n        }}\r\n        onBlur={handleSecondsChange}\r\n        min={0}\r\n        max={maxSeconds}\r\n        aria-label=\"Seconds\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}